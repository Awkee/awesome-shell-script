""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 作者: Awkee
" Email: xiaoyu0720@gmail.com
" Create Date: 2018/11/13
" 源码地址: https://github.com/Awkee/awesome-shell-script.git
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" VIM 使用帮助：
"   快捷键：
"       F1 : 更新F2打开的Tag标记列表
"       F2 : 打开代码tag标记列表(现实函数或者变量标记)
"       F3 : 显示当前文件的目录信息
"       F5 : 运行Python3代码
"       F9 : 颜色显示代码
"       F10 : 折叠/打开代码块
"   SplitView快捷命令：
"      tsv : 上下分屏打开文件
"      tvs : 左右分屏打开文件
"   Ctrl+h : 切换左侧分屏
"   Ctrl+l : 切换右侧分屏
"   Ctrl+j : 切换下侧分屏
"   Ctrl+k : 切换上侧分屏
"
"   Tab页导航快捷键:
"       tn : 下一tab页
"       tp : 上一tab页
"       tc : 关闭当前tab页
"       tm : 当前tab页移动数字x次(负数表示反向移动)
"       tt : 新打开tab页
"       ts : 使用当前tab页文件新打开一个tab页
"
"   代码编辑添加默认注释头部信息(支持bash、python、cpp、c代码文件)
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible              " required
filetype plugin off
filetype indent on


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'TaskList.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive' "Git Integration
Plugin 'vim-scripts/indentpython.vim'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'tabpagecolorscheme'
Plugin 'taglist.vim'
Plugin 'taglist-plus'
Plugin 'ollykel/v-vim'
Plugin 'Python-mode-klen'
Plugin 'rust-lang/rust.vim'



" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

Bundle 'Valloric/YouCompleteMe'



" All of your Plugins must be added before the following line
call vundle#end()            " required


set encoding=utf-8

set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936

set termencoding=utf-8

set fileencodings=ucs-bom,utf-8,cp936

set fileencoding=utf-8


set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" ## define language configuration 

"#"V language configure
"#let g:v_highlight_array_whitespace_error = 0
"#let g:v_highlight_chan_whitespace_error = 0
"#let g:v_highlight_space_tab_error = 0
"#let g:v_highlight_trailing_whitespace_error = 0
"#let g:v_highlight_function_calls = 0
"#let g:v_highlight_fields = 0


"# markdown folding #
"let g:vim_markdown_folding_style_pythonic = 1
"let g:vim_markdown_folding_level = 2
"let g:vim_markdown_override_foldtext = 0
"let g:vim_markdown_toc_autofit = 1


" Python语法高亮 
let python_highlight_all=1
syntax on

if has('gui_running')
  set background=dark
  colorscheme solarized
else
  colorscheme zenburn
endif

call togglebg#map("<F9>")

" Enable folding
set foldmethod=manual
set foldnestmax=10
set nofoldenable
set foldlevel=99
set foldcolumn=3
map <F10> :set foldmethod=manual<CR>za

set magic
set confirm
set nobackup
set noswapfile

" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l

set mouse=v
set selection=exclusive
set selectmode=mouse,key


" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2


" 看到折叠代码的文档字符串
"let g:SimpylFold_docstring_preview=1

" 自动补全
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set nu " 显示行号 

set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}   "状态行显示的内容
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2)


" buffer
" buffer splitview
map tsv :sv 
" split vertically
map tvs :vs 

" tab navigation mappings
map tn :tabn<CR>
map tp :tabp<CR>
map tc :tabclose<CR> 
map tm :tabm 
map tt :tabnew 
map ts :tab split<CR>

"imap <C-Right> <ESC>:tabn<CR>
"imap <C-Left>  <ESC>:tabp<CR>


let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CTags的设定
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Sort_Type = "name"    " 按照名称排序
let Tlist_Use_Right_Window = 1  " 在右侧显示窗口
let Tlist_Compart_Format = 1    " 压缩方式
let Tlist_Exist_OnlyWindow = 1  " 如果只有一个buffer，kill窗口也kill掉buffer
let Tlist_File_Fold_Auto_Close = 0  " 不要关闭其他文件的tags
let Tlist_Enable_Fold_Column = 0    " 不要显示折叠树

autocmd FileType java set tags+=./tags
autocmd FileType h,cpp,cc,c set tags+=./tags
let Tlist_Show_One_File=1            "不同时显示多个文件的tag，只显示当前文件的

"设置tags
set tags=tags

"默认打开Taglist
let Tlist_Auto_Open=0
" show pending Tag list
map <F2> :TlistToggle<CR>
map <F1> :TlistUpdate<CR>

""""""""""""""""""""""""""""""
" Tag list (ctags)
""""""""""""""""""""""""""""""""
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist窗口


" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\

" 高亮显示匹配的括号
set showmatch

" 增强模式中的命令行自动完成操作
set wildmenu

"代码补全

set completeopt=preview,menu

" 设置当文件被改动时自动载入
"set autoread


" NERDTree ----------------------------- 

" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']



let g:pymode_run = 1
let g:pymode_python = 'python3'
let g:pymode_run_bind = '<F5>'

let g:pymode_lint_ignore = "E501"
let g:pymode_lint_select = "W0011,W430"
let g:pymode_lint_sort = ['E', 'C', 'I']

"Show error message if cursor placed at the error line  *'g:pymode_lint_message'*
let g:pymode_lint_message = 1
" default code checkers ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_checkers = ['pep8']

" 自动保存视图
" au BufWinLeave *.* silent mkview
au BufWritePost *.* silent mkview

au BufWinEnter *.* silent loadview



"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头
autocmd BufNewFile *.py,*.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
"autocmd BufEnter *.pc,*.cp exec ":set syn=c"

""定义函数SetTitle，自动插入文件头

func SetTitle()

    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
        call append(line("."),"\########################################################################")
        call append(line(".")+1, "\# File Name: ".expand("%"))
        call append(line(".")+2, "\# Author: zioer")
        call append(line(".")+3, "\# mail: next4nextjob@gmail.com")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\########################################################################")
        call append(line(".")+6, "")

    elseif &filetype == 'python'
        set expandtab
        call setline(1, "\#!/usr/bin/env python3")
        call append(line("."),"# -*- coding: utf-8 -*-")
        call append(line(".")+1, "\###############################################################################")
        call append(line(".")+2, "\# Author: zioer")
        call append(line(".")+3, "\# mail: next4nextjob@gmail.com")
        call append(line(".")+4, "\# Created Time: ".strftime("%c"))
        call append(line(".")+5, "\# Brief: ")
        call append(line(".")+6, "\###############################################################################")
        call append(line(".")+7, "")

    else
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Author: zioer")
        call append(line(".")+2, "    > Mail: next4nextjob@gmail.com ")
        call append(line(".")+3, "    > Created Time: ".strftime("%c"))
        call append(line(".")+4, " ************************************************************************/")
        call append(line(".")+5, "")
    endif
    if &filetype == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif
    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G
endfunc


